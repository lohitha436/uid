import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Creative Widgets',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(primarySwatch: Colors.purple, fontFamily: 'Roboto'),
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Animated Creative Widgets'),
          backgroundColor: Colors.purpleAccent,
        ),
        body: const Padding(
          padding: EdgeInsets.all(16.0),
          child: MyHomePage(),
        ),
      ),
    );
  }
}

class MyHomePage extends StatelessWidget {
  const MyHomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        children: [
          AnimatedTapWidget(
            child: Container(
              padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 24),
              decoration: BoxDecoration(
                gradient: const LinearGradient(colors: [Colors.blueAccent, Colors.purpleAccent]),
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.purpleAccent.withOpacity(0.4),
                    blurRadius: 8,
                    offset: const Offset(2, 4),
                  ),
                ],
              ),
              child: const Center(
                child: Text(
                  'üç© Click Me!',
                  style: TextStyle(
                      color: Colors.white, fontWeight: FontWeight.bold, fontSize: 16, letterSpacing: 1.2),
                ),
              ),
            ),
            onTap: () => ScaffoldMessenger.of(context)
                .showSnackBar(const SnackBar(content: Text('Donut Button Pressed! üç©'))),
          ),
          const SizedBox(height: 20),
          AnimatedTapWidget(
            child: Card(
              elevation: 8,
              shadowColor: Colors.purpleAccent.withOpacity(0.5),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    const Text(
                      'üç©',
                      style: TextStyle(fontSize: 100),
                    ),
                    const SizedBox(height: 16),
                    const Text(
                      'Yummy Donut',
                      style: TextStyle(fontWeight: FontWeight.bold, fontSize: 20, color: Colors.black87),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'A kawaii-style donut inside a creative animated card!',
                      style: TextStyle(fontSize: 14, color: Colors.grey[700], height: 1.4),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
            onTap: () {},
          ),
        ],
      ),
    );
  }
}

// -------------------- Reusable Animated Tap Widget --------------------
class AnimatedTapWidget extends StatefulWidget {
  final Widget child;
  final VoidCallback onTap;
  const AnimatedTapWidget({required this.child, required this.onTap, super.key});

  @override
  State<AnimatedTapWidget> createState() => _AnimatedTapWidgetState();
}

class _AnimatedTapWidgetState extends State<AnimatedTapWidget>
    with SingleTickerProviderStateMixin {
  late final AnimationController _controller =
      AnimationController(vsync: this, duration: const Duration(milliseconds: 100));
  late final Animation<double> _animation =
      Tween<double>(begin: 1.0, end: 0.95).animate(_controller);

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTapDown: (_) => _controller.forward(),
      onTapUp: (_) {
        _controller.reverse();
        widget.onTap();
      },
      child: AnimatedBuilder(
        animation: _animation,
        builder: (_, child) => Transform.scale(scale: _animation.value, child: child),
        child: widget.child,
      ),
    );
  }
}
